
/*##############################################
###########  ..\..\core\helpers\base.js#################
##############################################*/

function array_replace_recursive(arr) {
  var retObj = {},
    i = 0,
    p = '',
    argl = arguments.length;

  if (argl < 2) {
    throw new Error('There should be at least 2 arguments passed to array_replace_recursive()');
  }

  // Although docs state that the arguments are passed in by reference, it seems they are not altered, but rather the copy that is returned (just guessing), so we make a copy here, instead of acting on arr itself
  for (p in arr) {
    retObj[p] = arr[p];
  }

  for (i = 1; i < argl; i++) {
    for (p in arguments[i]) {
      if (retObj[p] && typeof retObj[p] === 'object') {
        retObj[p] = this.array_replace_recursive(retObj[p], arguments[i][p]);
      } else {
        retObj[p] = arguments[i][p];
      }
    }
  }
  return retObj;
 }



function randomBetween(min, max){
  return Math.floor(Math.random() * max) + min;
}



function generateUUID(){
    var d = new Date().getTime();
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = (d + Math.random()*16)%16 | 0;
        d = Math.floor(d/16);
        return (c=='x' ? r : (r&0x7|0x8)).toString(16);
    });
    return uuid;
};

function getDocHeight() {
    var D = document;
    return Math.max(
        Math.max(D.body.scrollHeight, D.documentElement.scrollHeight),
        Math.max(D.body.offsetHeight, D.documentElement.offsetHeight),
        Math.max(D.body.clientHeight, D.documentElement.clientHeight)
    );
}

function changeFavicon(src) {
  document.head = document.head || document.getElementsByTagName('head')[0];

  var link = document.createElement('link'),
      oldLink = document.getElementById('dynamic-favicon');
  link.id = 'dynamic-favicon';
  link.rel = 'shortcut icon';
  link.href = src;
  if (oldLink) {
    document.head.removeChild(oldLink);
  }
  document.head.appendChild(link);
}

function getXml(xmlNode)
{
    var r;     
    
    if (xmlNode.xml)
      r = xmlNode.xml;
    else
      r = (new XMLSerializer()).serializeToString(xmlNode);  

    return r;
}


function getXmlDocument (text) {

      var message = "";

      //On IE, if XML is malformed, ActiveXObject returns more infos than DOMParser
      if (window.DOMParser)
      { 
          // all browsers, except IE before version 9
          var parser = new DOMParser();
          try 
          {
            xmlDoc = parser.parseFromString (text, "text/xml");
          } 
          catch (e) 
          {
                    // if text is not well-formed, 
                    // it raises an exception in IE from version 9
                    throw "XML parsing error.";
          };
      }
      else 
      {  // Internet Explorer before version 9
        if (!window["MsxmlObject"] )
          window["MsxmlObject"] = new ActiveXObject("MSXML.DOMDocument"); 

        xmlDoc = window["MsxmlObject"];
        xmlDoc.loadXML (text);
      }

      var errorMsg = null;
      if (xmlDoc.parseError && xmlDoc.parseError.errorCode != 0) 
      {
        errorMsg = "XML Parsing Error: " + xmlDoc.parseError.reason
        + " at line " + xmlDoc.parseError.line
        + " at position " + xmlDoc.parseError.linepos;
      }
      else 
      {
        if (xmlDoc.documentElement) {
          var errors = xmlDoc.getElementsByTagName( 'parsererror' );
          if( errors.length > 0 )
            errorMsg = errors[0].textContent;
        }
        else {
          errorMsg = "XML Parsing Error!";
        }
      }

      if (errorMsg) {
        throw errorMsg;
      }

      return xmlDoc;
}

/*function isUndefined(obj) {
      return obj === void 0;
}*/

/* 
  defined(object, "prop1", "prop2", "prop3" , ...) 
*/
function defined(obj)
{
  if ((typeof obj != "undefined") && (obj != null))
  { 
    var o = obj;
    for (var i=1; i<arguments.length; i++)
    {
        if (defined( o[arguments[i]] ))
          o = o[arguments[i]];
        else
          return false;
    }
    return true;
  }
  else
  {
    return false;
  }
}

function _extractBrowserVersion( reg ){
  var r = -1;
    var reg = new RegExp(reg);
    if (reg.exec(navigator.userAgent) != null)            
      r = parseFloat(RegExp.$1); 

   return r;
}

function getIEVersion()
{
    return _extractBrowserVersion("MSIE ([0-9]{1,}[\.0-9]{0,})");
}
function getFirefoxVersion()
{
    return _extractBrowserVersion("Firefox/([0-9]*)\.");
}
function getChromeVersion()
{
  return _extractBrowserVersion("Chrome/([0-9]*)\.");
}

String.prototype.contains = function(it) { 
  return this.indexOf(it) > -1; 
};

String.prototype.leftOf = function(souschaine)
{
 var index = this.indexOf(souschaine,0);
 if (index >=0)
 return this.substring(0, index)
 else
 return '';
}

String.prototype.capitalizeFirstLetter = function()
{
  if (this.length == 0)
    return this;
  return this.charAt(0).toUpperCase() + this.slice(1);
}

String.prototype.htmlEntities = function()
{ 
    return this.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

String.prototype.rightOf = function(search)
{
  var index = this.indexOf(search);

  if (index > -1)
    return this.substring(index+search.length, this.length);
  else 
    return "";
}

String.prototype.rightRightOf = function(souschaine)
{ 
  var index = this.lastIndexOf(souschaine);
  if (index > -1)
    return this.substr(index+souschaine.length);  
  else 
    return "";
}

String.prototype.isEmpty = function(){
   var s = this.trim();
   return (s == "");
};

String.prototype.startsWith = function(s){
  if ((arguments.length == 2) && (caseInsensistive === true))
    return this.toLowerCase().indexOf(s) == 0;
  else
    return this.indexOf(s) == 0;
};

String.prototype.endsWith = function(s, caseInsensistive){

  if ((arguments.length == 2) && (caseInsensistive === true))
    var indx = this.toLowerCase().lastIndexOf(s.toLowerCase());
  else
    var indx = this.lastIndexOf(s);   
  
   return ((indx>=0) && (indx == (this.length - s.length)));
};

String.prototype.stripAccents = function() {
  
    var translate_re = /[‡·‚„‰ÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˘˙˚¸˝ˇ¿¡¬√ƒ«»… ÀÃÕŒœ—“”‘’÷Ÿ⁄€‹›]/g;
    var translate = 'aaaaaceeeeiiiinooooouuuuyyAAAAACEEEEIIIINOOOOOUUUUY';
    return (this.replace(translate_re, function(match){
        return translate.substr(translate_re.source.indexOf(match)-1, 1); })
    );
};



String.prototype.hashCode = function(){
    var hash = 0
		var i, c;
    if (this.length == 0) return hash;
    for (i = 0; i < this.length; i++) {
        c = this.charCodeAt(i);
        hash = ((hash<<5)-hash)+c;
        hash = hash & hash; // Convert to 32bit integer
    }
    return hash;
};

String.prototype.removeEnd = function(s, caseInsensistive){
    if (arguments.length == 1)
      var caseInsensistive = false;

    if (this.endsWith(s, caseInsensistive))
      return this.substring(0, this.length - s.length);
    else
      return this.toString();  
  
};

String.prototype.occurences = function(souschaine)
{
  var r = [];
  var tmp = this;
  var index = tmp.indexOf(souschaine,0);
  var offset = 0;

  while ( index != -1 )
  {   
      r.push(offset + index);
      tmp = tmp.substring(index+souschaine.length, tmp.length);
      offset += index + 1;
      index = tmp.indexOf(souschaine,0);
  }

  return r;
}


Array.prototype.remove=function(s){
  /* supprime un object d'un tableau indexÈ. La case est retirÈe. */
  for(i=0;i < this.length; i++)
  {
    if(s==this[i]) 
    {
      this.splice(i, 1);
      return;
    }
  }
}

Array.prototype.pushArray = function (arr)
{  /* Ajout des ÈlÈments d'un tableau ‡ un tableau */
	 for (var i=0; i<arr.length; i++)
	    this.push(arr[i]);
}

function callLater(func, wait) 
{
  var args = Array.prototype.slice.call(arguments).slice(2);
  return setTimeout(function(){ return func.apply(null, args); }, wait);
}

function RGB2Color(r, g, b) {
  return '#' + byte2Hex(r) + byte2Hex(g) + byte2Hex(b);
}

function byte2Hex(n)
{
  var nybHexString = "0123456789ABCDEF";
  return String(nybHexString.substr((n >> 4) & 0x0F,1)) + nybHexString.substr(n & 0x0F,1);
}


/*##############################################
###########  ..\..\core\helpers\jquery.js#################
##############################################*/


/*
* Extension de jquery
*/

clone = function(obj) {
	return jQuery.extend(true, {}, obj);
}
/*
(function( $ ) {
 	

    $.fn.panjs = function() {
  		var selectedObjects = this;
        return {
	        getCompo : function() {
				var r = null;
				if ($(selectedObjects)[0].compo)
					r = $(selectedObjects)[0].compo;
				return r;
	        }
    	};
 
    };
 
}( jQuery ));*/


$.fn.load = function(args) {

	var el = $(this);
	var r = null;
	var dataCompo = el.attr("data-compo");

	if (dataCompo == null) {
		logger.warn("This element is not a panjs component");
	} else {
		var isLoaded = (el.attr("data-loaded") == "true");

		if (!isLoaded) {
			var originalId = el.attr("data-original-id");

			var id = el.attr("id");

			if (arguments.length == 0) {
				var args = el.data("args");
			}

			if (typeof args == "undefined")
				args = {};

			//panjs.setElementArgs(args.elem, args);

			args.elem = el[0];

			var compo = panjs.createComponent(dataCompo, args, false);

			compo.container[0].compo = compo;
			compo.container[0].loaded = true;

			compo.container.attr("data-loaded", "true");
			compo.container.attr("data-original-id", originalId);

			
			if (el[0].owner)
				el[0].owner._onSubComponentLoaded(compo, el, args);
			/*<ENV:dev>*/
			else
        		panjs.capture("$.fn.load: createComponent without owner",{componentId: compo.id, classPath: compo.classPath, from: null});
        	/*</ENV:dev>*/


			el.trigger(Tevent.LOADED, [compo, args]);

			el.replaceWith(compo.container);

			/*if (el.css("display") != "none")
				compo.container.css("display", el.css("display"));
			else
				compo.container.hide();*/

			compo._triggerOnAdded();

			el.remove();

			r = compo;
		} else {
			r = el[0].compo;
		}

	}
	return r;
};

$.fn.isLoaded = function() {
	return ($(this).attr("data-loaded") == "true")
}

$.fn.isCompo = function() {
	return ($(this).attr("data-compo") != null)
}
$.fn.getCompo = function() {
	//return $(this).panjs().getCompo();
	var r = null;
	if ($(this)[0].compo)
		r = $(this)[0].compo;
	return r;
}

$.fn.getElement = function (selector) {  
    //renvoie un seul element Jquery ou null si aucun √©l√©ment trouv√© 
		var r = $(this).find(selector);
		if (r.length == 0)
			return null;
		else
			return $(r[0]);
};

/* DEPRECATED */
$.fn.getElements = function (selector) {  
	logger.warn("PANJS: $.fn.getElements is deprecated");
    //renvoie un tableau Jquery d'elements Jquery (vide si aucun √©l√©ment trouv√©) 
		var r = $(selector, this);	//tableau d'√©lement DOM
		var result = $([]);
		if (r.length == 1)
			result.push(r);
		else
			for (var i=0; i< r.length; i++)
			{
				result.push($(r[i]));
			}		           
		return result;	
};

$.fn.swapWith = function(to) {
	return this.each(function() {
		var copy_to = $(to).clone(true);
		var copy_from = $(this).clone(true);
		$(to).replaceWith(copy_from);
		$(this).replaceWith(copy_to);
	});
};

function isNumberKey(evt)
{
      var k = evt.which;
      var shift = evt.shiftKey;

      var numerosPavenum = ((k >=96) && (k<=105));
      var numerosClavier = ((k >=48) && (k<=57));

      return numerosPavenum || (numerosClavier && (shift == true));
}

function isControlKey(evt)
{	
	// fl√®ches, backspace, supp, ctrl+C, ctrl+X , ctrl+V
	var k = evt.which;	
	var r =  (k == 8)||(k == 13)||(k == 46)||(k == 35)||(k == 36)||(k == 37)||(k == 39)||(k == 9) || ( evt.ctrlKey && (k=67))|| ( evt.ctrlKey && (k=86))|| ( evt.ctrlKey && (k=88));
	return r;
}


/*##############################################
###########  ..\..\core\starter.dev.js#################
##############################################*/

var defaultSettings = {
		appVersion: "1.0.0",
		logLevel	: "DEBUG",
		env			: "dev",
		version 	: "0.9.1",
		preserveElementsId: false,
		setSourceInComponents: false,
		stats: {
			active: false,
			url: "http://www.nexilearn.com/apis/portail_panjs/captures"
		},
		cache:{
			useLocalStorage: false
		},
		errorComponentClass: "panjs.core.display.TerrorElement.html"
};

panjs = array_replace_recursive(defaultSettings, panjs);

(function(panjs){

	var iever = getIEVersion();
    if ((iever < 9) && (iever >0))
    	alert("Internet Explorer "+getIEVersion()+" is not supported");

	if (!panjs.appName)
		throw "Config ERROR: panjs.appName is missing";
	if (! new RegExp("^[0-9a-zA-Z-_]*$", "g").exec(panjs.appName))
		throw "invalid appName. format: "+regAppName;

	/* private properties*/
	panjs._sourceUrl = "//# sourceURL=";
	var _FFversion = getFirefoxVersion();
	if ((_FFversion > 0) && (_FFversion <= 17))
		panjs._sourceUrl = "//@ sourceURL=";

	var _stack = [];
	var _stackLevel = 0;
	var _idList = {};

	/* public properties */
	panjs.logger = null;
	panjs._classes = {};
	panjs.root = {
		id: "root",
		components: {}
	};
	panjs.loader = null;
	

	panjs.basePath = location.pathname.removeEnd(location.pathname.rightRightOf("/"));
	panjs.basePath = panjs.basePath.removeEnd("/");

	panjs.fullBasePath = location.protocol + '//' + location.host + location.pathname
	panjs.messages = {
		CLASSNAME_MATCHS_FILENAME: "The name of the class (%1) must match the file name (%2) (case sensitive)",
		LESS_IE8: "less is not fully compatible with IE%1 : transform less code in css",
		LESS_NOT_LOADED: "LESS not loaded. Use panjs_core_with_less.min.js or load LESS (before panJs)",
		SCRIPT_ALREADY_LOADED: "loadScriptSync %1 : already loaded",
		LESS_INJECTED: "LESS: injection OK"
	};

	/* namespaces */
	for (var k in panjs.namespaces) {
		panjs.namespaces[k].path = panjs.namespaces[k].path.replace("{version}", panjs.version);
		panjs.namespaces[k].name = k;
	}

	/*
	LESS Config
	*/
	if (typeof panjs.less != "undefined")
		window["less"] = panjs.less;
	else
		window["less"] = {
			env: "production",
			async: true,
			fileAsync: false,
			poll: 1000
		};

	/* private functions */
	var _setElementArgs = function(el, args) {

		if (typeof el != "undefined") {
			for (var i = 0; i < el.attributes.length; i++) {
				var attr = el.attributes.item(i);

				var name = attr.nodeName.toLowerCase();
				var value = attr.value;

				if (name.startsWith("data-"))
					name = _getFormatedArgName(name);
			
				if (value == "true")
					value = true;
				else if (value == "false")
					value = false;

				args[name] = value;    
			}
		}
	}
	
	var _getFormatedArgName = function(argName) {
		//exemple: data-nom-model  => revoie nomModel    	
		argName = argName.rightOf("data-");
		return panjs.getCamelCase(argName);	
	}

	var _getErrorComponent = function(classPath, className, r) {
		if (typeof r == "string")
			r = {
				message: r,
				className: className
			};
		r.stack	= _stack;

		uses(panjs.errorComponentClass);
		object = new TerrorElement(r);

		_stack.push(r.message);
		_stackLevel--;

		if (_stackLevel <= 0) {
			_stack = [];
			_stackLevel = 0;
		}
		return object;
	};

	/*<ENV:dev>*/
	
	panjs.initCaptures = function(){
		
		if (this.stats.active == false)
			return;

		var appName = panjs.appName;
		var baseUrl =  panjs.stats.url;
		var fullUrl = baseUrl+'/init';
		var username = panjs.stats.username;
		var password = panjs.stats.password;

		var data = {
			appName: appName
		};

		var req = $.ajax({ 

		        url: fullUrl,
		        async:true,   
		        type: "post",
		        async: false,
		        data: JSON.stringify(data),
		        username: username, 
		        password: password,
		        success: function(data, textStatus, jqXHR){
		             logger.debug("initCaptures: success");
		        },
		        error: function(jqXHR, textStatus, errorThrown){
		         	logger.error("initCaptures: failure: "+jqXHR.responseText);
		        }
		});
	}
	panjs.capture = function(message, opt)
	{
		if (this.stats.active == false)
			return;

		var appName = panjs.appName;
		var baseUrl =  panjs.stats.url;
		var fullUrl = baseUrl;
		var username = panjs.stats.username;
		var password = panjs.stats.password;
		var groupId = 1;

		var data = {
		  message: message,
		  classPath: opt.classPath,
		  componentId: null,
		  fromClassName: null,
		  fromClassPath: null,
		  appName: appName,
		  groupId: groupId,
		  fromId: null,
		  isStatic: null,
		  timestamp: new Date().getTime()
		}

		if (opt.from != null){
			data.fromClassName = opt.from.className;
			data.fromClassPath = opt.from.classPath;
			if (opt.from.id != null)
				data.fromId = opt.from.id;
		}
		if (opt.componentId != null)
		    data.componentId = opt.componentId;

		if  (data.message == "createStaticObject")
			data.isStatic = true;
		if  (data.message == "createComponent")
			data.isStatic = false;

		var req = $.ajax({ 

		        url: fullUrl,
		        async:true,   
		        type: "post",
		        data: JSON.stringify(data),
		        username: username, 
		        password: password,
		        success: function(data, textStatus, jqXHR){
		             logger.debug("Send stats: success");
		        },
		        error: function(jqXHR, textStatus, errorThrown){
		         	logger.error("Send stats: failure: "+jqXHR.responseText);
		        }
		    });

	}
	/*</ENV:dev>*/
	
	panjs._exec = function(s) {

		if (s == "") return;

		if (typeof window.execScript != "undefined")
			window.execScript(s); //Port√© globale (eval sur IE n'a pas de port√© globale)
		else
			window.eval(s);
	}


	/* public functions */
	panjs._setDOMId = function(DOMel, originalId, classPath) {

		if (originalId){

			var elPreserveId = DOMel.getAttribute("data-preserve-id");

			if (elPreserveId == null) {
				elPreserveId = panjs.preserveElementsId;
			} else {
				elPreserveId = (elPreserveId == "true");
			}

			if (!elPreserveId) {
				var nodeName = DOMel.nodeName.toLowerCase();
				if (typeof _idList[nodeName] == "undefined") {
					_idList[nodeName] = 1;
				} else {
					_idList[nodeName]++;				
				}
				
				DOMel.setAttribute("id", nodeName + _idList[nodeName]);		
				DOMel.setAttribute("data-original-id", originalId);			
			}
		}
			
	}

	panjs.getClass = function(classPath) {

		if (typeof panjs._classes[classPath] == "undefined")
			uses(classPath);

		return panjs._classes[classPath].Class;

	};
	panjs.getInstance = function(classPath, args) {

		var _class = panjs.getClass(classPath);
		return new _class(args);

	};


	panjs.unload = function(classPath) {
		//var className = panjs._getClassNameFromClassPath(classPath);
		if (typeof panjs._classes[classPath] == "undefined")
			classPath = classPath + ".html";
	
		if (typeof panjs._classes[classPath] != "undefined"){		
			panjs._classes[classPath] = undefined;
			delete panjs._classes[classPath];
		}
	};
	

	panjs.createComponent = function(classPath, args, sendData) {
		
		_stackLevel++;
		var className = panjs._getClassNameFromClassPath(classPath);
		var object = null;

		if (typeof panjs._classes[classPath] == "undefined") {

				var r = panjs.loader.usesComponent(classPath);
				if ((r==null)||(!r.result))
					return _getErrorComponent(classPath, className, r);

		}


			if (typeof args == "undefined")
				var args = {};

			if (typeof args.elem != "undefined") {
				_setElementArgs(args.elem, args);
			}

			if (typeof panjs.root.components[classPath] != "undefined") {
				if (args.reuse != "undefined") {
					if (args.reuse === true) {
						var c = panjs.root.components[classPath];
						c.reuse(args);
						return c;
					}
				}
			};

			object = new panjs._classes[classPath].Class(args);


		_stackLevel--;
		if (_stackLevel <= 0) {
			_stack = [];
			_stackLevel = 0;
		}

		//_onInitialized signifie que l'objet est comp√®tement construit (mais il n'est pas forc√©ment visible).
		//!!cette fonction ne s'applique qu'aux composants (mais devrait aussi s'appliquer aux objets)
		if (object._onInitialized)
			object._onInitialized();

		panjs.root.components[classPath] = object;
		/*<ENV:dev>*/
			if (sendData !== false){
				var statsData = {classPath:classPath, componentId: object.id,  classPath: classPath, from: null};
				if (typeof sendData == 'object'){
					if (typeof statsData.from != "undefined"){
						statsData.from = sendData.from;					
					}
				}
				panjs.capture("createComponent", statsData);
			}
		/*</ENV:dev>*/

		return object;
	}

	panjs.getCamelCase = function(str) {
		//transforme un id="menu-toggle" en "menuToggle"
		if (str.indexOf("-") == -1)
			return str;

		var r = "";
		var parts = str.split("-");

		for (var i = 0; i < parts.length; i++) {
			if (i == 0)
				r = parts[i];
			else
				r += parts[i].capitalizeFirstLetter();
		}
		return r;
	}

	panjs.loadScriptAsync = function(url, success) {
		$LAB.script(url).wait(function() {

			if (typeof success != "undefined")
				success(url);
		});
	}
	
	panjs.loadScriptSync = function(url) {
		var r = { result: null, errorMessage: ""};

		if (!this.loader.loadedJs[url.toLowerCase()]) 
		{
			var result = this.loader._loadFileSync(this.loader._getUrlWithVersion(url));
			r.result = result.result;
			if (r.result != true){
				r.errorMessage = result.exception;
			}else{
				result.data += '\n'+panjs._sourceUrl+ url + '.js';
				panjs._exec(result.data);
				this.loader.loadedJs[url.toLowerCase()] = 1;				
			}
		} else {
			r.result = true
			logger.debug(panjs.messages.SCRIPT_ALREADY_LOADED, url);
		}
		return r;
	}

	panjs.load = function(element, onReady) {
		if (arguments.length == 0)
			var element = $(document.body);

		var compolist = [];

		if (element.attr("data-compo") != null)
			compolist.push(element);
		else
			compolist = element.find("[data-compo]");

		for (var i = 0; i < compolist.length; i++) {
			var el = $(compolist[i]);
			var dataType = el.attr("data-compo");
			var autoload = (el.attr("data-autoload") !== "false");
			var id = el.attr("id");

			if (autoload == true) {
				var compo = el.load();
				panjs.root[id] = compo;
			} else {
				panjs._setDOMId(el[0], id, dataType);

				el[0].compo = null;
				el[0].owner = null;

				panjs.root[id] = el;
			}
		}

		logger.info("READY");
		if (arguments.length == 2)
			onReady();
	}

	panjs._getClassNameFromClassPath = function(classPath) {
		var sep = ".";
		if (classPath.startsWith("http://") || classPath.startsWith("file://") || classPath.startsWith("https://") || (classPath[0] == "/"))
			sep = "/";

		var r = classPath;
		if (classPath.endsWith(".html"))
			r = classPath.removeEnd(".html");

		var parts = r.split(sep);

		r = parts[parts.length - 1];

		return r;
	}

	panjs.getNSFromClassPath = function(classPath) {
		var r = null;
		for (var k in panjs.namespaces) {
			if (classPath.startsWith(k + ".")) {
				r = panjs.namespaces[k];
				break;
			}
		}
		return r;
	}

	panjs.getAbsoluteUrlFromClassPath = function(classPath) {
		var isHtm = (classPath.endsWith(".html"));

		var r = "";
		if (classPath.startsWith("http://") || classPath.startsWith("file://") || (classPath[0] == "/")) {
			if (!isHtm)
				r = classPath + ".js";
			else
				r = classPath;
		} else {
			var classPathWithoutExt = classPath.removeEnd(".html");
			if (!classPathWithoutExt.contains(".")) {
				//fichier √† la racine
				r = panjs.basePath + "/" + classPath;
				if (!isHtm)
					r = r + ".js";
			} else {
				var namespace = panjs.getNSFromClassPath(classPath);
				if (namespace) {
					r = namespace.path + "/" + classPath.rightOf(namespace.name + ".").removeEnd(".html").replace(/\./g, "/");

					if (!isHtm)
						r = r + ".js";
					else
						r = r + ".html";
				}
			}
		}
		
		if (r == ""){
			r = classPath.removeEnd(".html").replace(/\./g, "/");
			if (!isHtm)
				r = r + ".js";
			else
				r = r + ".html";
			//throw "Can't resolve " + classPath + ": verify namespaces";
		}

		return r;
	}

	/*panjs._isAbsoluteUrl = function(url) {
		var s = url.toLowerCase();
		return ((s[0] == "/") || (s.toLowerCase().startsWith("http://")) || (s.toLowerCase().startsWith("https://")));
	}*/

}(panjs = panjs || {} ));


var Tobject = {
	classHierarchy: "Tobject",


	extend: function(properties, className, parentClassName) {
		var superProto = this.prototype || Tobject;

		var def = {};
		def["classHierarchy"] = {
			value: superProto.classHierarchy + ' ' + className
		};

		for (var k in properties) {
			if (k == "isLoaded")
				if (className != "TdisplayObject")
					logger.warn("Error extending " + superProto.classHierarchy + ' ' + className + ": 'isLoaded' property is reserved by panjs");

			if (k.startsWith("$")) {
				var defaultValue = properties[k];
				k = k.rightOf("$");
				//logger.debug("BINDABLE => " + k + ", defaultValue=" + defaultValue);

				def["__" + k] = {
					value: defaultValue,
					writable: true,
					enumerable: true
				};

				var setF = new Function('var key = "__' + k + '", propName="' + k + '",oldValue=this[key];newValue=arguments[0]; if (this[key] != arguments[0]){this[key] = arguments[0]; this.__OnPropChanged(propName, oldValue, newValue, this);}');
				var getF = new Function('var key = "__' + k + '"; return this[key]');
				def[k] = {

					get: getF,
					set: setF
				}

			} else {

				def[k] = {
					value: properties[k],
					writable: true,
					configurable: true,
					enumerable: true
				}

			}

		}

		var proto = Object.create(superProto, def);
		var constr = proto.constructor;

		if (!(constr instanceof Function))
			throw new Error("You must define a method 'constructor'");

		constr.prototype = proto;
		constr.prototype.parentClassName = parentClassName;
		constr._super = superProto;
		constr.extend = this.extend;

		return constr;
	},
	__OnPropChanged: function(propName, oldValue, newValue, object) {},

	injectParam: function(name, value, mandatory, defaut) //void
		{
			if ((typeof value == "undefined") || (value == null)) {
				if (typeof defaut != "undefined") {
					this[name] = defaut;
					return true;
				} else {
					if ((typeof mandatory != "undefined") && (mandatory == true))
						throw "The " + name + " argument has no default value on " + this.className;
					else
						return false;
				}
			} else {
				this[name] = value;
				return true;
			}
		}
};

function defineStaticClass(className, parentClassPath, def) {
	defineClass(className, parentClassPath, def, true);


}
function defineClass(className, parentClassPath, def, isStatic ) {

	if (arguments.length < 4)
		var isStatic = false;

	var isHtm = parentClassPath.endsWith(".html");
	var parentClasseName = panjs._getClassNameFromClassPath(parentClassPath);
	
	var classPath = null;
	if ((typeof __CLASSPATH__ != "undefined") && (__CLASSPATH__ != null))
		classPath = __CLASSPATH__;
	else
		classPath = className;

	var filename = classPath.removeEnd(".html");
	if (filename.contains("."))
		filename = filename.rightRightOf(".");

	if ((classPath != className) && (filename != className)){
		var mess = logger.parse(panjs.messages.CLASSNAME_MATCHS_FILENAME, className, filename);
		throw mess;
	}

	if ((typeof panjs._classes[parentClassPath] == "undefined") && (parentClasseName != "Tloader") && (parentClasseName != "Tlogger")&& (parentClasseName != "Tobject"))
	{
		if (isHtm)
			panjs.loader.usesComponent(parentClassPath);
		else
			panjs.loader.uses(parentClassPath);

		if (typeof panjs._classes[parentClassPath] == "undefined") {
			if (logger)
				logger.error("Unable to inherit from " + parentClassPath + ": class is not loaded");

			return null;
		}
	}


		if ( panjs._classes[parentClassPath] )
			var Class = panjs._classes[parentClassPath].Class.extend(def, className, parentClasseName);
		else
			//pour Tloader, Tlogger Tobject
			var Class = window[parentClasseName].extend(def, className, parentClasseName);
			
		panjs._classes[classPath] = {
			Class: Class,
			isComponent: isHtm,
			lastId: 0
		}
		
		Class.prototype.classPath = classPath;
		Class.prototype.className = className;

		if (isStatic){
			window[className] = new Class();
			window[className].id = classPath;
		}
		else{
			window[className] = Class;
		}

		var classNames = classPath.split(".");
		var nsObject = window;
		for (var i=0; i< classNames.length; i++){
			var ns = classNames[i];
			if (i == classNames.length-1 ){
				nsObject[ns] = window[className];
			}else
			if (typeof nsObject[ns] == "undefined"){
				nsObject[ns] = {};
			}
			nsObject = nsObject[ns];
		}


	__CLASSPATH__ = null;
	panjs._lastDefinedClassName = className;

	/*<ENV:dev>*/
	if (isStatic){
		var statsData = {classPath:classPath, componentId: window[className].id, from: null};
		if (typeof sendData == 'object'){
			if (typeof statsData.from != "undefined"){
				statsData.from = sendData.from;					
			}
		}
		panjs.capture("createStaticObject", statsData);
	}
	/*</ENV:dev>*/

}

function uses(classPath) {
	var isHtm = classPath.endsWith(".html");
	if (isHtm)
		var r = panjs.loader.usesComponent(classPath);
	else
		var r = panjs.loader.uses(classPath);
	return r;
}


/*** 
Tlogger
***/
defineClass("Tlogger", "panjs.core.Tobject", {
	_level: null,
	name: "MAIN",
	creationDate: null,
	_currentGroup: 0,
	_tabulation: "",
	tab: [],

	constructor: function(args) {
		

		this.injectParam("_level", args.level, false, Tlogger.INFO);
		this.injectParam("name", args.name, false);
		this.creationDate = new Date().getTime();
		this.setLevel(this._level);	
		this.razTime();

		this.info("Init logger LEVEL=%1", this.getLevelName());
	},

	razTime: function() {
		this.creationDate = new Date();
	},
	isLevelEnabled: function(level) {
		return level >= this._level;
	},
	getLevelName: function() {
		if (this._level == Tlogger.TRACE)
			return "TRACE";
		if (this._level == Tlogger.DEBUG)
			return "DEBUG";
		if (this._level == Tlogger.INFO)
			return "INFO";
		if (this._level == Tlogger.WARN)
			return "WARN";
		if (this._level == Tlogger.ERROR)
			return "ERROR";
	},
	groupStart: function() {

		//console.group(name);
		this._currentGroup++;
		this._calcTabultation();
	},
	groupEnd: function() {
		this._currentGroup--;
		this._calcTabultation();
		//console.groupEnd();
	},
	_calcTabultation: function() {
		this._tabulation = "";
		for (var i = 0; i < this._currentGroup; i++)
			this._tabulation += "\t";
	},
	_getTime: function() {
		return new Date().getTime() - this.creationDate;
	},
	_trace: function() {
		var m = this._getMessage("TRACE", arguments);
		if (console.trace)
			console.trace(m);
		else
			console.log(m);
	},
	_debug: function() {
		var m = this._getMessage("DEBUG", arguments);
		if (console.debug)
			console.debug(m);
		else
			console.log(m);
	},
	_info: function() {
		var m = this._getMessage("INFO", arguments);
		if (console.info)
			console.info(m);
		else
			console.log(m);
	},
	_warn: function() {
		var m = this._getMessage("WARN", arguments);
		if (console.warn)
			console.warn(m);
		else
			console.log(m);
	},
	_error: function() {
		console.error(this._getMessage("ERROR", arguments));
	},

	parse: function() {
		
		if (typeof arguments[0] == "string")
		{
			var r = arguments[0];
			for (var i=1; i<arguments.length; i++){
				var a = arguments[i]; 
				if (a == null) a = 'null';
				r = r.replace("%"+i, a);
			}
		}else{
			var r = "";
			for (var i=0; i<arguments.length; i++){
				r += JSON.stringify( arguments[i] )+"\n";
			}
		}

		return r;
	},

	_getMessage: function(sev, args) {		
		var r = this.parse.apply(this, args);
		return this._getTime() + "ms(" + this._currentGroup + ") - " + sev + "\t" + this._tabulation + r;
		//return this._getTime() + "ms(" + this._currentGroup + ") - " + sev + r;
	},

	setLevel: function() {
		return this._level;
	},
	setLevel: function(value) {
		this._level = value;
		this.trace = this._trace;
		this.debug = this._debug;
		this.info = this._info;
		this.warn = this._warn;
		this.error = this._error;

		if (value >= Tlogger.DEBUG)
			this.trace = function() {};

		if (value >= Tlogger.INFO)
			this.debug = function() {};

		if (value >= Tlogger.WARN)
			this.info = function() {};

		if (value >= Tlogger.ERROR)
			this.warn = function() {};
	}
});
Tlogger.TRACE = 10;
Tlogger.DEBUG = 20;
Tlogger.INFO = 30;
Tlogger.WARN = 40;
Tlogger.ERROR = 50;


//loader needs logger.
panjs.logger = new Tlogger({
	level: Tlogger[panjs.logLevel],
	name: "main"
});
logger = panjs.logger;


//Compat Ttracer (temporaire)
Ttracer = function() {};
Ttracer.getLogger = function(name) {
	return logger;
}


/*** 
Tloader: loads other classes or components (synchronous)
***/

defineClass("Tloader", "panjs.core.Tobject", {
	queue: [],
	loadedJs: null,
	loadedCss: null,
	_lessIsLoaded: null,
	randomId: "",

	constructor: function(args) {

		this.loadedJs = {};
		this.loadedCss = {};
		this.randomId = Math.random();

	},
	
	init: function(){
		/* Cache init */
		if (!panjs.cache.useLocalStorage) {
			panjs.cache = {};

			var prefix = "cache_" + panjs.appName;
			for (var i in localStorage) {
				/* empty localStorage */
				if (i.startsWith(prefix))
					localStorage.removeItem(i);
			}
		}
	},

	lessIsLoaded: function() {
		if (this._lessIsLoaded == null)
			this._lessIsLoaded = defined(window["less"], "refresh");
		return this._lessIsLoaded;
	},

	getClassPathDir: function(classPath) {

		/* returns:
		http://.../.../.../
		app.components.
		*/
		var classPathDir = classPath;

		if (classPath.endsWith(".js"))
			classPathDir = classPath.removeEnd(".js");
		else
		if (classPath.endsWith(".html"))
			classPathDir = classPath.removeEnd(".html");

		classPathDir = classPathDir.substr(0, classPathDir.lastIndexOf("."));

		return classPathDir;
	},

	_getUrlWithVersion: function(url) {

		if (url.contains("?") == false)
			url += "?";
		else
			url += "&";

		url += "v=" + panjs.appVersion;

		if (panjs.env == "dev")
			url = url + "&rid=" + this.randomId;

		return url;
	},
	_loadFileSync: function(url) {
		var useLocalStorage = (panjs.cache.useLocalStorage && (panjs.env == "prod") && (panjs.appName));

		if (useLocalStorage) {
			var prefix = "cache_" + panjs.appName;
			var key = (prefix + "." + panjs.appVersion + "." + url.hashCode());

			var data = localStorage.getItem(key);

			if (data) {
				return {
					'result': true,
					'data': data
				};
			}
		}

		try {
			var result = {
				'result': false,
				'exception': "",
				status: "erreur inconnue"
			};

			logger.debug("Loadfile SYNC %1", url);

			jQuery.support.cors = true;
			var req = jQuery.ajax({
				url: url,
				method: "GET",
				cache: true,
				async: false,
				dataType: "html",
				processData: false,
				context: this,

				beforeSend: function(request) {
					//Sur acc√®s GSM, les proxies des providers "optimisent" et modifient les pages html, les rendant non valides, et injectent du script etc.
					//no-transform √©vite √ßa

					//request.setRequestHeader("Cache-Control", "no-transform");
				},
				success: function(data, textStatus, jqXHR) {

					result = {
						'result': true,
						'data': data
					};
					if (useLocalStorage) {

						//suppression ancienne version
						for (var i in localStorage) {
							if (i.startsWith(prefix) && (!i.startsWith(prefix + "." + panjs.appVersion))) {
								logger.debug('Removing old version from locaStorage: %1', i);
								localStorage.removeItem(i);
							}
						}
						try {
							localStorage.setItem(key, data);
						} catch (err) {
							logger.debug(err + ": data from " + url + " will not be saved");
						}
					}
				},
				error: function(jqXHR, settings, exception) {
					logger.error("Load error. url=%1, exception=%2", url, exception);

					result = {
						'result': false,
						'jqXHR': req,
						'exception': exception
					};
					if (req && req.status)
						result.status = req.status;
					else
						result.status = exception;

				}
			});

		} catch (err) {
			result = {
				'result': false,
				'exception': err,
				status: err
			};
		}



		return result;
	},

	getFileSync: function(url) {
		return this._loadFileSync(url);
	},

	usesComponent: function(classPath) {
		/*
		Loads HTML file
		*/
		var className = panjs._getClassNameFromClassPath(classPath);

		var r = {
			result: false,
			message: "",
			className: className,
			classPath: classPath,
			url: null,
			path: null,
			Class: null
		};

		if (typeof panjs._classes[classPath] == "undefined") {
			
			//logger.parse("USESCOMPONENT %1", classPath);

			logger.debug("USESCOMPONENT %1", classPath);
			logger.groupStart();

			r.path = panjs.getAbsoluteUrlFromClassPath(classPath);
			r.url = this._getUrlWithVersion(r.path);
	
			var data = this._loadFileSync(r.url);

			if (data.result) {

				try {
					var dom = getXmlDocument(data.data);
				} catch (err) {
					logger.error("XML error in class " + className + ": " + err);
					r.isXmlError = true;
					r.message = err;	
					return r;				
				}

				var headNode = dom.getElementsByTagName("head")[0];
				var bodyNode = dom.getElementsByTagName("body")[0];
				var linkNodes = [];
				var styleNodes = [];
				var dirPath = r.path.substring(0, r.path.lastIndexOf("/"));

				for (var i = 0; i < headNode.childNodes.length; i++) {

					var node = headNode.childNodes[i];

					var nodeName = node.nodeName.toLowerCase();
					/*
					On doit charger le style √† la fin car le style de la dernire classe
					doit "ecraser" les styles des classes parentes.
					*/

					if (nodeName == "script") {

							this.addScriptNode(node, dirPath, className, classPath);

					} else {
						if (nodeName == "link")
							linkNodes.push(node)
						else if (nodeName == "style")
							styleNodes.push(node);
					}

				}
				if (typeof panjs._classes[classPath] == "undefined")
				{
					r.message = "Classe "+classPath+" not loaded";
					return r;
				}
				var Class = panjs._classes[classPath].Class;

				for (var i = 0; i < linkNodes.length; i++) {
					this.addLinkNode(linkNodes[i], dirPath);
				}

				for (var i = 0; i < styleNodes.length; i++) {
					logger.debug("Load style %1", classPath);
					this.addStyleNode(styleNodes[i]);
				}

				if (defined(bodyNode)) {

						var html = getXml(bodyNode);
						var parentClassName = Class.prototype.parentClassName;

						if (defined(window[parentClassName].prototype.html)) {
							if (window[parentClassName].prototype.html.contains('<!--CONTENT-->'))
								html = window[parentClassName].prototype.html.replace('<!--CONTENT-->', html);

						}

						html = html.replace(/<body>/gi, "").replace(/<\/body>/gi, "");
						//html = html.replace(/\\r/gi, "").replace(/\\n/gi, "").trim();

						Class.prototype.html = html;
						Class.prototype.bodyNode = bodyNode;

				}
				/*else
				{         
					//html et bodyNode are inherited            
				}*/
				if (panjs.setSourceInComponents)
					Class.prototype.source = data.data;
				
				Class.prototype.classPathDir = this.getClassPathDir(classPath);
				Class.prototype.dirPath = dirPath;
				Class.lastId = 0;

				logger.groupEnd();
				logger.debug("END USESCOMPONENT %1", classPath);
				
				r.result = true;
				r.message = "ok";
				r.Class = Class;
				return r;

			} else {
				
				var mess = "Error loading " + classPath + ": " + data.status;
				logger.warn(mess);		
				r.mess = mess;
				return r;
			}

		}else{
			r.result = true;
			r.mess = "Already loaded";
			r.Class = panjs._classes[classPath].Class;
		}
		return r;		
	},

	uses: function(classPath) {

		var className = panjs._getClassNameFromClassPath(classPath);
		var r = {
			result: false,
			message: "",
			className: className,
			classPath: classPath,
			url: null,
			path: null,
			Class: null
		};

		if (typeof panjs._classes[classPath] == "undefined") {
			
			logger.debug("USES %1", classPath);
			logger.groupStart();
			
			r.path = panjs.getAbsoluteUrlFromClassPath(classPath);
			var dirPath = r.path.substring(0, r.path.lastIndexOf("/"));
	
			r.url = this._getUrlWithVersion(r.path);
			var data = this._loadFileSync(r.url);

			if (data.result) {
				data.data = this._processCode(data.data, className, dirPath, classPath, '.js');
				panjs._exec(data.data);

				if (typeof panjs._classes[classPath] == "undefined")
				{
					r.message = "Classe "+classPath+" not loaded";
					return r;
				}

				var Class = panjs._classes[classPath].Class;

				Class.prototype.classPathDir = this.getClassPathDir(classPath);
				Class.prototype.dirPath = dirPath;
			
				panjs._classes[classPath].lastId = 0;
				
				r.result = true;
				r.message = "ok";
				r.Class = Class;

			}else{
				throw classPath+" not loaded: "+data.status;				
			}
			
			logger.groupEnd();
			logger.debug("END USES %1", classPath);
	
		} else {		
			r.result = true;
			r.message = "Already loaded";		
			r.Class = Class;	
		}

		return r;

	},
	_transformUrl: function(url, dirPath) {
		/*
		renvoie l'url absolue 
		*/

		if ((url[0] != "/") && (url.substring(0, 7) != "http://") && (url.substring(0, 7) != "file://")  && (url.substring(0, 8) != "https://"))
			url = dirPath + "/" + url;
		return url;
	},

	addLinkNode: function(node, dirPath) {
		var url = this._transformUrl(node.getAttribute("href"), dirPath);

		var type = node.getAttribute("type") || 'text/css';
		var rel = node.getAttribute("rel") || 'stylesheet';

		this.loadCssFile(url, type, rel);

	},
	loadCssFile: function(url, type, rel) {

		if (arguments.length == 0)
			throw "loadCssFile(url, type , rel): Missing url";

		var r = false;

		url = this._getUrlWithVersion(url);

		if (this.loadedCss[url.toLowerCase()])
			return r;

		if (arguments.length < 2)
			var type = "text/css";

		if (arguments.length < 3)
			var rel = "stylesheet";

		var link = document.createElement('link');
		link.rel = rel;
		link.type = type;
		link.href = url;

		if (rel == "stylesheet/less") {
			if (this.lessIsLoaded()) {
				less.sheets.push(link);
				less.refresh(true);
				logger.debug(panjs.messages.LESS_INJECTED);
				r = true;
			} else {
				logger.warn(panjs.messages.LESS_NOT_LOADED);
			}
		} else {
			document.getElementsByTagName('head')[0].appendChild(link);
			r = true;
		}

		if (r == true)
			logger.debug("Load <link> ASYNC: %1", url);

		this.loadedCss[url.toLowerCase()] = true;

		return r;
	},
	addStyle: function(css, type) {
		if (css.trim() == "")
			return;

		if (arguments.length < 2)
			var type = "text/css";

		$('<style type="' + type + '">' + css + '</style>').appendTo('head');


		if (type == "text/less") {
			if (this.lessIsLoaded()) {
				less.refresh();

				logger.debug(panjs.messages.LESS_INJECTED);
			} else {
				logger.warn(panjs.messages.LESS_NOT_LOADED);

			}
		}
	},

	addStyleNode: function(node) {

		var type = node.getAttribute("type");
		if (type == null)
			type = 'text/css';

		var css = node.textContent;
		this.addStyle(css, type);

	},

	_processCode: function(code, className, dirPath, classPath, ext) {
		/*
			Remplace this._super par className._super
			*/			
		var r = code.replace("defineClass(", "var __CLASSPATH__='"+classPath+"';defineClass(").replace(/this._super/g, 'panjs._classes["' + classPath + '"].Class._super') + '\n'+panjs._sourceUrl+ dirPath + "/" + className + ext;
			r = r.replace("defineStaticClass(", "var __CLASSPATH__='"+classPath+"';defineStaticClass(");
		return r;
	},

	addScriptNode: function(node, dirPath, className, classPath) {
		var subtype = node.getAttribute("data-subtype");
		var src = node.getAttribute("src");

		if (src == null) {
			var script = node.textContent;

			if ((className != null) && (subtype == "text/x-class-definition")) {
				script = this._processCode(script, className, dirPath, classPath, '.html');
			}
			panjs._exec(script);
		} else {
			var url = this._transformUrl(src, dirPath);

			if (!this.loadedJs[url.toLowerCase()]) {
				var r = this._loadFileSync(this._getUrlWithVersion(url));
				if ((className != null) && (subtype == "text/x-class-definition")) {
					r.data = this._processCode(r.data, className, dirPath, classPath, '.js')
				} else {
					r.data += '\n'+panjs._sourceUrl + src + '.js';
				}

				panjs._exec(r.data);
				this.loadedJs[url.toLowerCase()] = 1;

			} else {
				logger.debug( panjs.messages.SCRIPT_ALREADY_LOADED, url );
			}
		}
		return true;
	}

});



panjs.loader = new Tloader();
panjs.loader.init();

/*<ENV:dev>*/
if (panjs.stats.active)
	panjs.initCaptures();
/*</ENV:dev>*/


/*##############################################
###########  ..\..\core\events\Tevent.js#################
##############################################*/

/*
Tevent
*/

__CLASSPATH__="panjs.core.events.Tevent";
defineClass("Tevent", "panjs.core.Tobject",
{  
	type: null,
	data: null,
	relatedData: null,
	bubbles: false,
	cancelable: false,
	currentTarget: null,
	cancelled: false,
	defaultPrevented: false,

	constructor: function(type, eventData, bubbles, cancelable){
		this.injectParam("type", type,true);
		this.injectParam("data", eventData);
		this.injectParam("bubbles", bubbles);
		this.injectParam("cancelable", cancelable);     
	},
	preventDefault: function()
	{
		this.defaultPrevented = true;
	}
});

Tevent.CLICK = "click";
Tevent.CHANGE = "change";
Tevent.SUCCESS = "success";
Tevent.ERROR = "error";
Tevent.DELETE = "delete";
Tevent.UPDATE = "update";
Tevent.ADDED = "added";
Tevent.LOADED = "loaded";
Tevent.BEFORE_LOAD = "before_load";
Tevent.DATA_LOADED = "data-loaded";
Tevent.REFRESH = "refresh";
Tevent.REPLACE = "replace";
Tevent.ITEM_CLICKED = "item-clicked";
Tevent.OPEN = "open";
Tevent.CLOSE = "close";
Tevent.READY = "ready";
Tevent.BEFORE_STATE_CHANGE = "before_state_change";
Tevent.STATE_CHANGED = "state_changed";
Tevent.KEYDOWN = "keydown";
Tevent.SHOW = "show";
Tevent.SHOWN = "shown";
Tevent.HIDE = "hide";
Tevent.HIDDEN = "hidden";
Tevent.WAITING = "waiting";







/*##############################################
###########  ..\..\core\events\TeventDispatcher.js#################
##############################################*/

/*
TeventDispatcher 
_eventTypes: { type1:[listener1, listener2 ...], type2:[listener1, listener2 ...], ...}
*/

uses("panjs.core.events.Tevent");

__CLASSPATH__="panjs.core.events.TeventDispatcher";
defineClass("TeventDispatcher", "panjs.core.Tobject", { 

	_listeners: null,
	
	
	constructor: function(args){
		this._listeners = {};
	},
	
	free: function(){
		this.removeAllListeners();
	},
	
	/* 	params event:Tevent 
		return Boolean
	*/
	_getListenerIndex: function(type, listener)
	{	
		if (!this.hasEventListener(type))
			return -1;
		
		for (var i=0; i< this._listeners[type].length; i++)
		{
			if (this._listeners[type][i] != null)
				if (this._listeners[type][i].listener == listener)
					return i;
		}
		return -1;
	},
	
	dispatchEvent: function(mixed, eventData, bubbles, cancelable)
	{	
		/*mixed = Tevent: {type, eventData, bubbles, cancelable}
			or 
		mixed = {type, eventData, bubbles, cancelable}*/

		var type = null;
		var event = null;
		if (typeof mixed == "object")
		{
			event = mixed;
			type = mixed.type;
		}
		else{
			type = arguments[0];
		}

		if (!this.hasEventListener(type))
				return;
		//un objet event n'est cr√©√© que si il y a des listeners
		if (event == null)
			event = new Tevent(type, eventData, bubbles, cancelable);
		
		var listeners = this._listeners[event.type];

		for (var i=0; i< listeners.length; i++)
		{
			if (listeners[i] != null)
			{
				var list = listeners[i];

				if (event.currentTarget == null)
				event.currentTarget = this;

				event.bind =  list.bind;
				event.relatedData = list.data;
				
				if (event.bind == null)
					list.listener.call(this, event);
				else
					list.listener.call(event.bind,event);
				
				if (event.cancelled)
					break;
			}
		}	
	},

	/* 	params type:String, listener:Function
		return void
	*/
	on: function(type, listener, bind, data)
	{
		if (arguments.length <4 ) var data = null;
		if (arguments.length <3 ) var bind = null;

		var l = {"listener":listener, "data": data, "bind":bind};

		if (!this.hasEventListener(type))
			this._listeners[type] = [];
		
		for (var i=0; i< this._listeners[type].length; i++)
		{
			if (this._listeners[type][i] == null)
			{
				this._listeners[type][i] = l;
				return;
			}
		}	
		this._listeners[type].push(l);
	},

	
	offByCtx: function(ctx){
		for (type in this._listeners)
		{
			var listeners = this._listeners[type];
			for (var i=0; i< listeners.length; i++)
			{
				if ((listeners[i] != null)&&(listeners[i].bind == ctx))
				{
					listeners[i] = null;
				}	
			}
		}
	},
	
	off: function(type, listener)
	{
		var indx = this._getListenerIndex(type, listener);
	
		if (indx >= 0)
		{
			this._listeners[type][indx] = null;
		}
	},
	removeAllListeners: function()
	{
		for (type in this._listeners)
		{
			this._listeners[type].length = 0;
			this._listeners[type] = null;
			delete this._listeners[type];
		}
	},
	/* 	params: type:String	
		return Boolean
	*/
	hasEventListener: function(evtType) 
	{
		return (typeof this._listeners[evtType] != "undefined");
	}
});


/*##############################################
###########  ..\..\core\managers\Trouter.js#################
##############################################*/

__CLASSPATH__="panjs.core.managers.Trouter";
defineClass("Trouter", "panjs.core.events.TeventDispatcher", {
	
	hash: "",
    sendEvents: true,
    keys: {},
    listeners: {},
    base64encode: false,

	constructor: function(args) {
		Trouter._super.constructor.call(this,args);

		if (this.base64encode)
			uses("panjs.helpers.EncodeTools");

  		if ("onhashchange" in window) 
	    {
	      window.onhashchange = this.onhashchange.bind(this);
	    }
	    else    
	    {
	      logger.error("Trouter.constructor: Event window.hashchanging not supported!")
	    }
  	},
  	refreshkeys: function()
  	{
		var hash = window.location.hash.rightOf('#');
		this.keys = this.decode(hash);
		//logger.debug("Trouter.refreshkeys: this.keys = "+JSON.stringify(this.keys));
  	},
  	registerComponent: function(c, onhashchange)
  	{
  		this.refreshkeys();
  		if (typeof this.listeners[c.hashKey] == "undefined")
  			this.listeners[c.hashKey] = [];
  		this.listeners[c.hashKey].push( {owner: c, onhashchange: onhashchange.bind(c) });
  	},

  	getHash: function(owner)
  	{
  		var r = this.keys[owner.hashKey] ||null;
  		return r;
  	},
	setHash: function(owner, value, silent)
  	{
  		//if (typeof value == "undefined")
  		//	value = null;
  		//logger.debug("START Trouter.setHash: "+value+" silent="+silent);
  		if (this.keys[owner.hashKey] != value)
  		{
  			var oldValue = this.keys[owner.hashKey];

  			this.keys[owner.hashKey] = value||null;
  			var encoded = this.encode(this.keys);
  			this.sendEvents = false;
			window.location.hash = encoded;
			/*Le fait d'avoir d√©j√† modifi√© this.keys fait que onhashchange ne d√©tectera pas qeul objet a modifi√© son hash (pas de diff√©rence)
			et n'enverra pas d'evenement donc on envoie l'√©v√®nement ici.
			De plus, c'est plus optimis√©.
			!!edit: en fait onhashchange est d√©clench√© quand m√™me apr√®s cette fonction.
			*/

			if (!silent)
				this._dispatchOnhashchange(owner.hashKey, value, oldValue);

			//logger.debug("Trouter.setHash: RETOUR Onhashchange="+r);
			this.sendEvents = true;	
		}
		else
		{
			logger.debug("Trouter.setHash: "+value+" => inchang√© sur "+owner.id);
			//this._dispatchOnhashchange(owner.hashKey, value);
		}
		//logger.debug("END Trouter.setHash: "+value+" silent="+silent);
  	},
  	_dispatchOnhashchange: function( hashKey, hash, oldValue)
  	{
  		if (typeof hash == "undefined")
			hash = null;

		if (hashKey != null)
		{
			if (this.listeners[hashKey])
			{
				for (var i=0; i<this.listeners[hashKey].length; i++){
					var l = this.listeners[hashKey][i];	
					l.onhashchange(hash, oldValue);
				}
				
			}
		}/*else{

			for (var k in this.listeners)
			{			
				var l = this.listeners[k];
				l.onhashchange(hash);	
			}
		}*/
  	},
  	decode: function(str)
  	{
  		var r = {};
  		if ((str != ""))
  		{
  			try{

  				if (this.base64encode)	
	    		str = EncodeTools.base64decode(str);   

	    		//r = JSON.parse(r);
	    		str = str.split("&");

	    		for (var i=0; i<str.length; i++)
	    		{
	    			if (str[i].trim() != "")
	    			{
	    				var arr = str[i].split("=");
	    				k = arr[0];
	    				v = arr[1];
	    				//if (v.trim() != "")
	    				r[k] = v;
	    			}
	    		}
			}catch(err)
			{
				logger.error("Trouter.decode: Echec decodage de "+str+" en objet: "+err);
			}
		}
		/*else
		{
			logger.error("Trouter.decode: Echec decodage  de "+str+" en objet: chaine vide");
		}*/
		return r;
  	},

  	encode: function(obj)
  	{
  		var r = "";

  		try{
  				
	    		//r = JSON.stringify(object);
	    		for (k in obj)
	    		{
	    			if (typeof obj[k] == 'string')
	    			//if ((obj[k].trim() != "")&&(obj[k].trim() != ""))
	    			r = r+k+"="+obj[k]+"&";
	    		}
	    		
	    		if (this.base64encode)	
	    		r = EncodeTools.base64encode(r);  

		}catch(err)
		{
			logger.error("Trouter.encode: Echec encodage de "+obj+" en string: "+err);
			logger.debug("Trouter.encode: obj = "+JSON.encode(obj));
		}
		return r;
  	},

  	onhashchange: function(e)
  	{
  		//*Le hash n'est pas cod√© (il provient de liens):
  		/* Cette fonction est d√©clench√©e uniquement quand on modifie l'Url manuellement ou que l'on avance ou recule dans l'historique */
  		if (!this.sendEvents)
  			return false;

	    this.hash = window.location.hash.rightOf('#');
	    this.keysTmp = this.decode(this.hash);

	    /*
		
	    */
		//logger.debug("Trouter.onhashchange: PHASE 1 :");	    
		//logger.debug("Trouter.onhashchange: this.keysTmp = "+JSON.stringify(this.keysTmp));
		//logger.debug("Trouter.onhashchange: this.keys = "+JSON.stringify(this.keys));

  		for (k in this.keysTmp)
	    {
	  		//logger.debug("Trouter.onhashchange: k="+k+" , this.keys[k]="+this.keys[k]+", this.keysTmp[k]="+this.keysTmp[k]);
	    	if ((typeof this.keys[k] == "undefined")||(this.keys[k] == null))
	    	{
	    		//la clef est valoris√©e alors qu'elle ne l'√©tait pas
	    		var oldhash =  null;
	    		this.keys[k] = this.keysTmp[k];
	    		//logger.debug("Trouter.onhashchange: VALORISATION this.keys["+k+"] = "+this.keysTmp[k]);
	    		logger.debug("Trouter.onhashchange: [1] Le composant "+k+" va √™tre notifi√© que son hash a chang√©: hash="+this.keys[k]+", oldhash="+oldhash);
	    		this._dispatchOnhashchange(k, this.keys[k], oldhash);   
	    	}else{
				//la clef est valoris√©e, elle l'√©tait d√©j√†
	    		if (this.keysTmp[k] != this.keys[k])
	    		{
	    			var oldhash =  this.keys[k];
	    			//logger.debug("Trouter.onhashchange: VALORISATION this.keys["+k+"] = "+this.keysTmp[k]);
	    			this.keys[k] = this.keysTmp[k];
	    			logger.debug("Trouter.onhashchange: [2] Le composant "+k+" va √™tre notifi√© que son hash a chang√©: hash="+this.keys[k]+", oldhash="+oldhash);
	    			this._dispatchOnhashchange(k, this.keys[k], oldhash);  
	    		}
	    	}
	    	    	
	    }

	    //logger.debug("Trouter.onhashchange: PHASE 2 :");
	    //logger.debug("Trouter.onhashchange: this.keysTmp = "+JSON.stringify(this.keysTmp));
		//logger.debug("Trouter.onhashchange: this.keys = "+JSON.stringify(this.keys));
	    //Mise √† null des clefs qui n'existent plus

  		for (k in this.keys){
  			found = true;		
  			if (typeof this.keysTmp[k] == "undefined")
	    	{	    			
	    		this.keys[k] = null;
	    		logger.debug("Trouter.onhashchange: [3] Le composant "+k+" va √™tre notifi√© que son hash a chang√©: hash="+this.keys[k]);
	    		if (typeof this.listeners[k] != "undefined"){
	    			
	    			this._dispatchOnhashchange(k, this.keys[k], null);   
	    		}
	    	}
  		}
	    
		var evt = new Tevent(Trouter.HASH_CHANGE,  this.keys);
	    this.dispatchEvent(evt);

		
		return false;
  	}

});

Trouter.HASH_CHANGE = "HASH_CHANGE" ;

panjs.router = new Trouter();


/*##############################################
###########  ..\..\core\collections\TarrayCollection.js#################
##############################################*/

__CLASSPATH__="panjs.core.collections.TarrayCollection";
defineClass("TarrayCollection", "panjs.core.events.TeventDispatcher", {
		_source: null,
		length: 0,
		key: null,
		_byId: null,
		filterFunction: null,
		_items: null,

		constructor: function(args) {
				TarrayCollection._super.constructor.call(this, args);

				this._items = [];

				var data = [];
				if (args) {
						if (typeof args.push != "undefined") {
								data = args;
						} else {
								if (args.key)
										this.key = args.key;
								if (args.data)
										data = args.data;
								if (args.filterFunction)
										this.filterFunction = args.filterFunction;
						}
				}

				this._byId = {};
				this.setSource(data);

				/* √ßa fonctionne */

				/*   Object.defineProperty(this._source, "length", {
						set : function(newValue){ 
								logger.debug("changedgg "+this._length+" => "+newValue);
								this._length = newValue; 
						},
						get : function(){ 
								return this._length; 
						}
					});*/

		},

		sort: function(sortFunction) {
				if (defined(sortFunction))
						this._items.sort(sortFunction);
		},

		getSource: function() {
				return this._items;
		},
		setSource: function(value, silent) {
			
			if ((typeof value != "object")||(typeof value.push != "function"))
			{
				logger.error("TarrayCollection.setSource: data must be a array !");

			}else{
				
				if (this._source != value) {
						this._source = value;

						if (this.filterFunction != null) {
								this._items = this._source.filter(this.filterFunction);
						} else {
								this._items = this._source.slice(0);
						}

						if (this.key != null) {
								this._byId = {};
								for (var i = 0; i < this._items.length; i++)
										this._byId[this._items[i][this.key]] = this._items[i];
						}
						this.length = this._items.length;
						this.refresh(silent);
				}
			}

		},
		find: function(opt) {
				var r = [];
				if (opt.filterFunction) {
						for (var i = 0; i < this._source.length; i++) {
								if (opt.filterFunction(this._source[i]))
										r.push(this._source[i]);
						}
				}

				return r;
		},
		swap: function(sourceItem, destItem){
			var indx1 = this.getItemIndex(sourceItem);
			var indx2 = this.getItemIndex(destItem);
			this._items[indx1] = destItem;
			this._items[indx2] = sourceItem;
		},
		getByKey: function(key) {
				return this._byId[key];
		},
		getByProp: function(propname, propvalue, multiple, case_sensitive) {
				var r = null;

				if ((this.key != null) && (propname == this.key)) {
						if (typeof this._byId[propvalue] != "undefined")
								r = this._byId[propvalue];
				} else {
						if (typeof case_sensitive == "undefined")
								case_sensitive = false;

						if ((!case_sensitive) && (typeof propvalue == 'string'))
								propvalue = propvalue.toLowerCase();

						if (arguments.length < 3) {
								var multiple = false;
						} else {
								r = [];
						}
						for (var i = 0; i < this._items.length; i++) {
								var item = this._items[i];

								if (typeof item[propname] != "undefined") {
										var tmp = item[propname];
										if ((!case_sensitive) && (typeof item[propname] == 'string'))
												tmp = item[propname].toLowerCase();

										if (tmp == propvalue) {
												if (multiple == true) {
														r.push(item);
												} else {
														r = item;
														break;
												}

										}
								}
						}
				}

				return r;
		},
		getFilterFunction: function() {
				return this.filterFunction;
		},
		setFilterFunction: function(f) {
				if (this.filterFunction != f) {
						this.filterFunction = f;
				}
		},
		dispatchUpdateEvent: function(item) {
				this.dispatchEvent(new Tevent(Tevent.UPDATE, {item:item} ));
				this.dispatchEvent(new Tevent(Tevent.CHANGE, {
						action: "UPDATE",
						item: item
				}));
		},

		refresh: function(silent) {

				if (this.filterFunction != null)
						this._items = this._source.filter(this.filterFunction);

				this.length = this._items.length;
				if (!silent){
					this.dispatchEvent(new Tevent(Tevent.REFRESH, this));
					this.dispatchEvent(new Tevent(Tevent.CHANGE, {
						action: "REFRESH"
					}));
				}
		},

		/*
		 ******************** LECTURE DE LA COLLECTION ************************
		 */
		getItems: function() {
				return this._items;
		},
		_getItemIndex: function(item, list) {
				for (var k = 0; k < list.length; k++) {
						if (list[k] == item)
								return k;
				}
				return -1;
		},
		getItemIndex: function(item) {
				return this._getItemIndex(item, this._items);
		},

		getItemAt: function(indx) {
				return this._items[indx];
		},

		contains: function(item) {
				return (this.getItemIndex(item) >= 0);
		},
		/*
		 ******************** MODIFICATION DE LA COLLECTION ************************
		 */
		_replaceItem: function(indx, item, newItem, silent) {

				this._items[indx] = newItem;
				if (this.key != null) {
						this._byId[item[this.key]] = newItem;
						this.dispatchEvent(new Tevent(Tevent.UPDATE, item));
				}

				this.length = this._items.length;
				if (!silent){
					this.dispatchEvent(new Tevent(Tevent.REPLACE, {
							item: item,
							newItem: newItem
					}));
					this.dispatchEvent(new Tevent(Tevent.CHANGE, {
							action: "REPLACE",
							item: item,
							newItem: newItem
					}));
				}
		},

		replaceItem: function(item, newItem, silent) {
				if (item == newItem)
						return;

				var indx = this._getItemIndex(item, this._source);
				if (indx > -1)
						this._source[indx] = newItem;

				indx = this.getItemIndex(item);
				if (indx > -1) {
						if (this.filterFunction == null) {
								this._replaceItem(indx, item, newItem, silent);
						} else {
								if (this.filterFunction(newItem)) {
										//Filtre OK
										this._replaceItem(indx, item, newItem, silent);

								} else {
										//Filtre KO
										this._removeItemAt(indx, newItem, silent);
								}
						}

				}
		},
		_addItemAt: function(indx, item, silent) {

				if (this.key != null) {
						if (typeof this._byId[item[this.key]] != "undefined") {
								throw "Key already in collection: " + item[this.key];
						}
						this._byId[item[this.key]] = item;
				}

				this._items.splice(indx, 0, item);
				this.length = this._items.length;
				if (!silent){
					this.dispatchEvent(new Tevent(Tevent.ADDED, {
							item: item,
							index: indx
					}));
					this.dispatchEvent(new Tevent(Tevent.CHANGE, {
							action: "ADDED",
							item: item,
							index: indx
					}));
				}
		},

		addItem: function(item, silent) {
				this._source.push(item);

				if ((this.filterFunction == null) || (this.filterFunction(item))) {
						var indx = this.getItemIndex(item);
						if (indx == -1) {
								this._addItemAt(this.length, item, silent);
						}
				}
		},

		addItemsAt: function(items, indx, silent) {
				if (indx > this.length) {
						this.addItems(items, silent);
				} else {
						var position = indx;
						for (var i = 0; i < items.length; i++) {
								this._source.push(items[i]);
								if ((this.filterFunction == null) || (this.filterFunction(items[i]))) {
										var indx = this.getItemIndex(items[i]);
										if (indx > -1) {
												position++;
												this._addItemAt(position, items[i], silent);
										}

								}
						}
				}
		},

		addItems: function(items, silent) {
				this.addItemsAt(items, this.length, silent);
		},
		addItemAt: function(item, indx, silent) {
				if (indx > this.length) {
						this.addItem(item)
				} else {
						this._source.push(item);
						if ((this.filterFunction == null) || (this.filterFunction(item))) {
								this._addItemAt(indx, item, silent);
						}
				}
		},
		forEach: function(f) {
				this._items.forEach(f);
		},
		removeItems: function(mixed, silent) {
				if (typeof mixed == "function") {
						var itemsToRemove = [];
						for (var i = 0; i < this._items.length; i++)
								if (mixed(this._items[i]))
										itemsToRemove.push(this._items[i]);
				} else {
						var itemsToRemove = mixed;
				}

				for (var i = 0; i < itemsToRemove.length; i++)
						this.removeItem(itemsToRemove[i], silent);

				return itemsToRemove;
		},

		removeItem: function(item, silent) {
				if (item != null) {
						var indx = this.getItemIndex(item);
						if (indx >= 0) {
								this._removeItemAt(indx, item, silent);
						}
				} else {
						var indx = -1;
				}

				return indx;
		},

		removeItemAt: function(indx, silent) {
				var item = this.getItemAt(indx);
				if (item != null)
						this._removeItemAt(indx, item, silent);
		},

		removeAll: function(silent) {
				this._source = [];
				this._items = [];
				this._byId = {};
				this.refresh(silent);
		},

		_removeItemAt: function(indx, item, silent) {
		
				this._items.splice(indx, 1);

				var indxSource = this._getItemIndex(item, this._source);

				if (indxSource >= 0)
						this._source.splice(indxSource, 1);

				this.length = this._items.length;
				if (this.key != null)
						delete this._byId[item[this.key]];
				if (!silent){
					this.dispatchEvent(new Tevent(Tevent.DELETE, {item: item} ));
					this.dispatchEvent(new Tevent(Tevent.CHANGE, {
							action: "DELETE",
							item: item
					}));
				}
				
		}
});


/*##############################################
###########  ..\..\core\display\TdisplayObject.js#################
##############################################*/


/*
TdisplayObject

	height : Number
	name : String
	visible : Boolean
	width : Number
	x: int
	y: int

added
Dispatched when a display object is added to the display list.	DisplayObject
 	 	
addedToStage
Dispatched when a display object is added to the on stage display list, either directly or through the addition of a sub tree in which the display object is contained.	DisplayObject
 	 	 		 	
removed
Dispatched when a display object is about to be removed from the display list.	DisplayObject
 	 	
removedFromStage
Dispatched when a display object is about to be removed from the display list, either directly or through the removal of a sub tree in which the display object is contained.	DisplayObject
 	 	
render
[broadcast event] Dispatched when the display list is about to be updated and rendered.
 
*/

__CLASSPATH__="panjs.core.display.TdisplayObject";
defineClass("TdisplayObject", "panjs.core.events.TeventDispatcher",
{ 
	/* PROPRIETES */

	container:null,
	id:null,
	parent:null,
	_parent:null,
	visible:true,	//Etat de d√©part
	autoload: true,
	
	baseElement:null,
	
	_realVisible: false,
	args: null,
	
	/* Si on ne sait pas si l'objet est un objet jquery ou pas, 
		la fonction isLoaded() et load() doivent pouvoir √™tre appel√©es.
	*/
	load:function(){
		return this;
	},
	isLoaded:function(){
		return true;
	},
	free: function(){
		TdisplayObject._super.free.call(this);
		this.container.remove();
		/*<ENV:dev>*/
        panjs.capture("free",{classPath: this.classPath, componentId: this.id});
        /*</ENV:dev>*/

	},

	_onInitialized: function()
	{
	},
	
	constructor: function(args) { 
		TdisplayObject._super.constructor.call(this,args);
		this.args = args;

		if (this.baseElement == null)
			throw "La propri√©t√© \"baseElement\" n'est pas d√©fini sur "+this.className;

		/* Cr√©ation du conteneur */

		this.container = $('<'+this.baseElement+"/>");
		//this.container.css("display", "none");	

		panjs._classes[this.classPath].lastId ++;
		this.id = this.classPath+"_"+panjs._classes[this.classPath].lastId;

		
		this.container[0].owner = this;
		this.container[0].compo = this;
		
  		//logger.debug("init TdisplayObject: ",this.className,", id=",this.id);
  	},
  	addClass: function(v){
  		this.container.addClass(v);
  	},
  	removeClass: function(v){
  		this.container.removeClass(v);
  	},
  	createComponent: function(classPath, args, sendData){

  		var compo = panjs.createComponent(classPath,args, false);
  		

  		return compo;
  	},
  	_triggerOnAdded: function(){
  		if (this._onAdded){
			if ($.contains( document.body, this.container[0] )){
				this._onAdded();	
			}else{
				setTimeout( function(){
					if ($.contains( document.body, this.container[0] ))
						this._onAdded();	
					}.bind(this), 50);
			}
		}
  	},
  	append: function( mixed){		
  		var source = mixed;
  		var dest = this.container;
  		
  		if (mixed.isCompo())
  		{
  			var source = mixed.container;
  			if (this.content != null)
  				dest = this.content;
  		}
	
		dest.append(source);	

  		if (mixed._onAdded)
  			mixed._onAdded();	
  		
	},
  	appendTo: function(elem){		
  		elem.append(this.container);		
  		if (elem.isCompo())
  			elem[0].owner._children.push(this);
  		
  		this._triggerOnAdded();
	},
	prependTo: function(elem){ 		
  		this.container.prependTo(elem);		
  		if (elem.isCompo())
  			this._children.push(elem[0].owner);
	},

  	hide: function(args){	

 		if (defined(args, "hideFn"))
  			args.hideFn(this.container);
  		else
  			this.container.hide(args);

  		this.visible = false;
  		this._realVisible = this.visible;
  	
  		if (typeof this._onHide != "undefined")
  		this._onHide();
  	},
  	show: function(args){

  		if (this._realVisible)
  			return;
  		if (defined(args, "showFn"))
  			args.showFn(this.container);
  		else
			this.container.show(args);

  		this.visible = true;
  		this._realVisible = this.visible;

  		if (typeof this._onShow != "undefined")
  		this._onShow();

  	},
  	toggle: function(args){
  		this.container.toggle(args);
  		this.visible = !this._visible;
  	}
});

/*  STATIC */




/*##############################################
###########  ..\..\core\display\TdisplayObjectContainer.js#################
##############################################*/

__CLASSPATH__ = "panjs.core.display.TdisplayObjectContainer";
defineClass("TdisplayObjectContainer", "panjs.core.display.TdisplayObject", {

    _statesElements: null,
    currentState: null,
    defaultState: null,
    _bindElements: null,
    __bindings: null,
    _children: null,

    constructor: function(args) {
        this._bindElements = [];
        this.__bindings = {
            html: []
        };

        TdisplayObjectContainer._super.constructor.call(this, args);
        if (this._children == null)
            this._children = [];

        this._children = [];
        this._statesElements = [];
        this.currentState = [];

        if (defined(this.html) && (this.html.trim() != "")) {
            this.container.html(this.html);
            this._populateElements(this.container[0], true);
        }
        if (this._statesElements.length > 0) {
            this.setState([]);
        }
        //logger.debug("init TdisplayObjectContainer: "+this.className+". args="+args);
    },

    bindEvent: function(el, evtName, on_evt_attr, compo) {

        if (on_evt_attr.startsWith("{{")) {
            var script = on_evt_attr.rightOf("{{").leftOf("}}");
            var f = new Function(script).bind(this);
            el.on(evtName, f);
        } else {

            var script = 'arguments[0].on("' + evtName + '", ' + on_evt_attr + '.bind(this));';
            var sl = new Function(script).bind(this);

            if (!compo) {
                sl(el, evtName);
            } else {
                sl(compo, evtName);
            }
        }
        //this._bindElements.push(el);		
    },

    bindEvents: function(el, compo) {

        if (arguments.length == 1)
            var compo = null;

        for (var i = 0; i < el[0].attributes.length; i++) {
            var attrName = el[0].attributes[i].nodeName;

            if (attrName.indexOf("data-on") === 0) {

                var on_evt_attr = el[0].attributes[i].value;
                var evtName = attrName.substr(7);
                this.bindEvent(el, evtName, on_evt_attr, compo);
            }
        }
        //this.bind(el);
    },

    bind: function(el) {
        /*var html = el.html();
        if (html.match(/\{\{.*\}\}/))
        {
        	var tempFn = doT.template(html).bind(this);
        	this.__bindings.html.push({template: html, element: el, tempFn: tempFn});
        }*/
    },

    renderBindings: function() {
        for (var i = 0; i < this.__bindings.html.length; i++) {
            var b = this.__bindings.html[i];

            try {
                //logger.error("RENDER "+b.template+" => "+b.tempFn(this));
                b.element.html(b.tempFn(this));
            } catch (err) {
                logger.error(err);
            }
        }
    },
    createComponent: function(classPath, args) {
        var compo = TdisplayObjectContainer._super.createComponent(classPath, args);
        if (this._children == null)
            this._children = [];
        this._children.push(compo);
       /*<ENV:dev>*/
        panjs.capture("createComponent",{classPath: classPath, componentId: compo.id, from: {id: this.id, className: this.className, classPath: this.classPath}});
        /*</ENV:dev>*/
        return compo;
    },

    free: function() {

        if (this._children != null) {
            TdisplayObjectContainer._super.free.call(this);
            for (var i = 0; i < this._children.length; i++) {
                this._children[i].free();
            }

            this._children = null;
        }
        //inutile de d√©saffecter les events sur les objets jquery car remove() le fait.
        //!!par contre, ce n'est pas le cas pour les composants panjs (il faut appeler free() sur tous les compo)
    },
    __OnPropChanged: function(propName, oldValue, newValue, object) {
        //logger.debug("__OnPropChanged : propName = "+propName+", oldValue = "+oldValue+", newValue = "+newValue);
        this.renderBindings();
    },

    processStates: function(element) {
        var includeIn = element.getAttribute("data-include-in");
        if (includeIn != null)
            includeIn = includeIn.split(" ");
        var includeLogic = element.getAttribute("data-include-logic") || "OR";

        var excludeFrom = element.getAttribute("data-exclude-from");
        if (excludeFrom != null)
            excludeFrom = excludeFrom.split(" ");
        var excludeLogic = element.getAttribute("data-exclude-logic") || "OR";


        if ((excludeFrom != null) && (includeIn != null))
            throw "'excludeFrom' and 'includeIn' attributes are exclusive";

        if ((includeIn != null) || (excludeFrom != null)) {
            var isCompo = (element.getAttribute("data-compo") != null);
            var loaded = (element.getAttribute("data-loaded") == "true");

            var obj = {
                display: element.style.display,
                loaded: loaded,
                isCompo: isCompo,
                visible: null,
                elem: element,
                excludeLogic: excludeLogic,
                includeLogic: includeLogic,
                id: element.getAttribute("id"),
                includeIn: includeIn,
                excludeFrom: excludeFrom
            };
            this._statesElements.push(obj);

        }
    },

    stateExists: function(state) {
        var r = false;
        if ((state == null) || (state == ""))
            return false;

        for (var i = 0; i < this._statesElements.length; i++) {
            var s = this._statesElements[i];
            if ((s.includeIn != null) && (s.includeIn.indexOf(state) >= 0)) {
                r = true;
                break;
            } else
            if ((s.excludeFrom != null) && (s.excludeFrom.indexOf(state) >= 0)) {
                r = true;
                break;
            }
        }
        return r;
    },
    _onSubComponentLoaded: function(compo, el, args) {

        this._children.push(compo);

        var originalId = compo.container.attr("data-original-id");

        panjs._setDOMId(compo.container[0], originalId, compo.classPath);

        /* el est l'√©l√©ment Jquery d'origine */
        this.bindEvents(el, compo);



        if (originalId)
            this[originalId] = compo;

        for (var i = 0; i < this._statesElements.length; i++) {
            var obj = this._statesElements[i];
            if (obj.elem == el[0]) {

                obj.loaded = true;
                obj.elem = compo.container[0];

                this.setStatesAttributes(el[0], obj.elem);

                break; //On consid√®re qu'un id n'est utilis√© qu'une seule fois dans un composant.
            }
        }

        /*<ENV:dev>*/
        if (panjs.capture)
        panjs.capture("createComponent",{classPath: compo.classPath, componentId: compo.id, from: {id: this.id, className: this.className, classPath: this.classPath}});
        /*</ENV:dev>*/
    },

    getChildren: function() {
        return this._children;
    },
    findComponents: function(classPath) {
        var r = $([]);
        if (arguments.length == 0)
            var selector = '[data-compo]';
        else
            var selector = '[data-compo*="' + classPath + '"]';

        this.container.find(selector).each(function(indx, el) {
            if (el.isCompo())
                r.push(el.owner);
        });
        return r;
    },

    setStatesAttributes: function(sourceElem, destElem) {
        if (sourceElem.getAttribute("data-include-in"))
            destElem.setAttribute("data-include-in", sourceElem.getAttribute("data-include-in"));

        if (sourceElem.getAttribute("data-include-logic"))
            destElem.setAttribute("data-include-logic", sourceElem.getAttribute("data-include-logic"));

        if (sourceElem.getAttribute("data-exclude-from"))
            destElem.setAttribute("data-exclude-from", sourceElem.getAttribute("data-exclude-from"));

        if (sourceElem.getAttribute("data-exclude-logic"))
            destElem.setAttribute("data-exclude-logic", sourceElem.getAttribute("data-exclude-logic"));
    },
    _setStateElementVisible: function(visible, stateObj, opt) {
        var r = false;

        //logger.error("_setStateElementVisible visible="+visible+", isCompo="+stateObj.isCompo+", loaded="+stateObj.loaded+", id="+stateObj.id+", elem.compo="+stateObj.elem.compo);

        if (stateObj.visible != visible) {

            r = true;
            var el = $(stateObj.elem);

            if (visible) {
                //affichage de l'√©l√©ment
                if (stateObj.isCompo) {


                    // composant			
                    if (!stateObj.loaded) {
                        var compo = el.load();
                        compo.show(opt);
                        //logger.error("SHOW "+compo.id);
                    } else {
                        stateObj.elem.compo.show(opt);
                        //logger.error("SHOW "+stateObj.elem.compo.id);
                    }

                } else {
                    // objet jquery
                    if (defined(opt, "showFn")) {

                        opt.showFn(el, stateObj);
                    } else {

                        el.show(opt);
                        if (stateObj.display != "none")
                            el.css("display", stateObj.display);

                        /*var oldDisplay = el.css("display");
                        el.show(opt); 
                        if (oldDisplay != "none")
                        	el.css("display", oldDisplay);*/

                    }
                }
            } else {

                if (stateObj.isCompo) {
                    // composant	

                    if (!stateObj.loaded) {
                        if (defined(opt, "hideFn"))
                            opt.hideFn(el, stateObj)
                        else
                            el.hide(opt);
                    } else {
                        stateObj.elem.compo.hide(opt);
                        //logger.error("HIDE "+stateObj.elem.compo.id);
                    }
                } else {
                    // objet jquery
                    if (defined(opt, "hideFn")) {
                        opt.hideFn(el, stateObj);
                    } else {
                        //stateObj.oldDisplay = el.css("display");
                        //logger.error("_setStateElementVisible "+visible+" "+stateObj.id+" oldDisplay="+oldDisplay);

                        //if (stateObj.oldDisplay != "none")
                        el.hide(opt);
                    }
                }
            }

            stateObj.visible = visible;
        }
        return r;
    },

    hasState: function(state) {
        var r = false;

        if (typeof state == "string") {
            for (var j = 0; j < this.currentState.length; j++) {
                if (this.currentState[j] == state) {
                    r = true;
                    break;
                }
            }
        } else {
            logger.error("hasState error: state is undefined");
        }

        return r;
    },
    toggleState: function(state, value, opt) {
        var changed = false;
        if (arguments.length == 1) {
            var value = !this.hasState(state);
        } else {
            if (arguments.length == 2) {
                if (typeof value != "boolean") {
                    opt = value;
                    var value = !this.hasState(state);
                }
            }
        }

        if (value == false) {
            changed = this.removeState(state, opt);
        } else {
            changed = this.addState(state, opt);
        }
        return changed;
    },
    addState: function(state, opt) {

        var changed = false;

        if (typeof state == "string") {
            var currentState = [];
            var found = false;


            for (var j = 0; j < this.currentState.length; j++) {
                if (this.currentState[j] == state) {
                    found = true;
                } else {
                    currentState.push(this.currentState[j]);
                }
            }

            if (!found) {
                changed = true;
                currentState.push(state);
                this.setState(currentState, opt);
            }
        } else {
            logger.error("addState error: state is undefined");
        }

        return changed;
    },
    removeState: function(state, opt) {

        var changed = false;

        if (typeof state == "string") {
            var currentState = [];

            for (var j = 0; j < this.currentState.length; j++) {
                if (this.currentState[j] != state)
                    currentState.push(this.currentState[j]);
                else
                    changed = true;
            }
            if (changed)
                this.setState(currentState, opt);

        } else {
            logger.error("removeState error: state is undefined");
        }
        return changed;

    },
    setState: function(mixed, opt) {
        /*
        	- On affiche les √©l√©ments ayant includeIn = un des states pass√© en argument
        	- On cache les √©l√©ments ayant excludeFrom = un des states pass√© en argument
        	*/

        var newStatesHash = {};
        var oldStatesHash = {};


        var changed = false;
        if (typeof mixed == 'string') {

            var states = [mixed];
            newStatesHash[mixed] = 1;

        } else {

            var states = mixed;
            for (var i = 0; i < states.length; i++)
                if (states[i] != undefined)
                    newStatesHash[states[i]] = 1;
                else
                    logger.error("setState error: state is undefined");
        }



        var oldStates = this.currentState;
        for (var i = 0; i < this.currentState.length; i++) {
            this.container.removeClass(this.currentState[i]);
            oldStatesHash[this.currentState[i]] = 1;
        }

        this.currentState = [];

        for (var j = 0; j < this._statesElements.length; j++) {
            var el = this._statesElements[j];

            var included = true;
            var excluded = true;

            if (el.includeIn != null) {
                excluded = null;
                included = true;

                for (var i = 0; i < el.includeIn.length; i++) {
                    var stateName = el.includeIn[i];

                    var stateIncluded = (typeof newStatesHash[stateName] != "undefined");

                    if (el.includeLogic == "OR") {
                        included = stateIncluded;
                        if (included)
                            break;
                    } else {
                        included = included && stateIncluded;
                    }
                }
            } else if (el.excludeFrom != null) {
                excluded = false;
                included = null;
                for (var i = 0; i < el.excludeFrom.length; i++) {
                    var stateName = el.excludeFrom[i];
                    var stateIncluded = (typeof newStatesHash[stateName] != "undefined");

                    if (el.excludeLogic == "OR") {
                        excluded = stateIncluded;
                        if (excluded)
                            break;
                    } else {
                        excluded = excluded && stateIncluded;
                    }
                }
            }

            if ((included != null) || (excluded != null)) {
                var show = ((included == true) || (excluded == false));

                var ch = this._setStateElementVisible(show, el, opt);
                changed = ch || changed;
            }
        }

        this.currentState = [];
        for (var k in newStatesHash) {
            this.currentState.push(k);
            this.container.addClass(k);
        }

        if (changed) {
            if (logger.isLevelEnabled(Tlogger.TRACE))
                logger.trace(this.id + ".currentState = " + JSON.stringify(this.currentState));

            var statesAdded = [];
            for (k in newStatesHash)
                if (typeof oldStatesHash[k] == "undefined")
                    statesAdded.push(k);

            var statesRemoved = [];
            for (k in oldStatesHash)
                if (typeof newStatesHash[k] == "undefined")
                    statesRemoved.push(k);

            this.dispatchEvent(new Tevent(Tevent.STATE_CHANGED, {
                oldStates: oldStates,
                newStates: this.currentState,
                removedStates: statesRemoved,
                addedStates: statesAdded
            }));
        }

        return changed;
    },

    processElement: function(jqObject , opt){
        var el = jqObject[0];
        if (arguments.length == 1) 
            var opt = {};

        var r = this._processElement(el, jqObject.parent()[0], true);
        
        if (opt && (opt.processStates == true))
            this.setState(this.currentState);

        return r;
    },

    _processElement: function(el, parent, setObject, autoload) {
        if (el.nodeType == 1) {
            //nodeType = ELEMENT	

            var id = el.getAttribute("id");
            var dataType = el.getAttribute("data-compo");

            var jqObj = $(el);
            var r = null;

            if (dataType == null) {

                if ((setObject) && (id != null)) {
                    if (defined(this[id]))
                        logger.error('1-Duplication du id "' + id + '" sur objet ' + this.className);

                    var fId = panjs.getCamelCase(id);
                    this[fId] = jqObj;
                    panjs._setDOMId(el, id, dataType);
                    //r.push(id);	
                }
                this.bindEvents(jqObj);
                this.processStates(el);
                this._populateElements(el, setObject);
            } else {
                if (dataType == this.classPath) {
                    logger.error("R√©f√©rence circulaire dans " + this.classPath);
                } else {

                    if (arguments.length < 4 )
                        var autoload = !(el.getAttribute("data-autoload") === "false");

                    if (autoload) {
                        //creation instance du composant
                        var compo = this.createComponent(dataType, {
                            elem: el,
                            parent: this
                        });


                        /*if (compo.className == "TerrorElement"){
                        	panjs.stack.push("Unable to create "+dataType+" : "+compo.message);
                        }*/

                        compo.parent = this;

                        if ((setObject) && (id != null)) {
                            if (defined(this[id]))
                                logger.error('2-Duplication du id "' + id + '" sur objet ' + this.className);

                            this[id] = compo;

                            panjs._setDOMId(compo.container[0], id, dataType);
                            //r.push(id);										
                        }

                        this.bindEvents(jqObj, compo);

                        jqObj.replaceWith(compo.container);

                        compo.container.attr("data-loaded", "true");
                        el.setAttribute("data-loaded", "true");

                        compo.container[0].loaded = true;
                        compo.container[0].compo = compo;
                        //logger.error(compo.id+" => "+compo.container[0].getAttribute("data-include-in"));

                        this.setStatesAttributes(el, compo.container[0]);
                        this.processStates(compo.container[0]);

                        compo._triggerOnAdded();
                        r = compo;

                    } else {
                        panjs._setDOMId(el, id, dataType);

                        jqObj[0].compo = null;
                        jqObj[0].owner = this;
                        this[id] = jqObj;

                        this.processStates(el);
                        //Le composant n'est pas instanci√©: on met un proxy √† la place, qui a la fonction LOAD()

                        /*uses("panjs.core.display.TproxyDisplayObject");
                        var proxyCompo = new TproxyDisplayObject({sourceElement:el});
                        proxyCompo.parent = this;
                        el.loaded = false;
                        el.compo = proxyCompo;
                        $(el).hide();
                        if ((setObject)&&(id != null))
                        	this[id] = proxyCompo;*/
                    }

                }
            }




        } else if (el.nodeType == 8) {
            var text = "";
            text = el.textContent;
            text = text.toUpperCase();

            if (text == "CONTENT") {

                var c = document.createElement("div");
                c.setAttribute("data-class", "content");
                parent.replaceChild(c, el);
                this.content = $(c);
            }
        }
        return r;
    },
    _populateElements: function(element, setObject) {

        //logger.info("_populateElements sur "+this.className+", element.id="+element.getAttribute("id")+", nodeName="+element.nodeName);

        /*
        Renvoie un tableau contenant tous les id des √©l√©ments contenus dans "element", en r√©cursif.
        setObject: true/false. Si false, l'√©l√©ment trouv√© n'est pas stock√©:
        Cas du parsing de <CONTENT>: on ne veut pas que les √©l√©ments de <CONTENT> soient stock√©s 
        car ils appartiennet √† l'objet parent.
        Exemple:
        <VBox>
        	<Label id="label1" text="OK label1"/>
        	<Label id="label2" text="OK label2"/>
        </VBox>
        La VBox et les 2 labels sont sur l'objet parent.
        Les 2 labels sont en fait inject√© ici, mais ne font pas partie du template.
        */


        for (var i = 0; i < element.childNodes.length; i++) {
            var el = element.childNodes[i];
            this._processElement(el, element, setObject);

        }
        
    }
});

/*  STATIC */
TdisplayObjectContainer._listeIdElements = [];


/*##############################################
###########  ..\..\core\display\Telement.js#################
##############################################*/

/*
Classe bas√©e sur un template.
Cette classe peut √™tre d√©riv√©e mais n'est pas instanciable telle quelle.
*/
__CLASSPATH__="panjs.core.display.Telement";	
defineClass("Telement", "panjs.core.display.TdisplayObjectContainer",
{ 
	/* PROPRIETES */
	html:null,
	content: null,	
	sourceElement:  null, 
	inheritsStyle: true,
	enableHashManager: false,
	hashKey: null,
	sourceElementStyle: null,
	
	/* METHODES */	
	constructor: function(args) { 
		
		Telement._super.constructor.call(this,args);
		
	
		if (this.enableHashManager == true){
			uses("panjs.core.managers.Trouter");

			if (this.hashKey == null)
				if (this.id>1)
					this.hashKey = this.className+this.id;
				else
					this.hashKey = this.className;
			
			panjs.router.registerComponent(this, this._onHashChange, this.hashKey);
		}

		var styleClass;
		if (this.inheritsStyle)
			styleClass = this.classHierarchy.rightOf("Telement");
		else
			styleClass = this.className;

		this.container.addClass(styleClass);
		this.container.attr("data-compo", this.classPath);
		this.container.attr("data-class-name", this.className);

		if (typeof args != "undefined")
		{
			if (defined(args, "elem"))
			{
				/* On injecte les attributs de l'√©l√©ment dans args */
				var el = args.elem;
							
				/* On injecte le contenu de l'√©l√©ment source dans l'√©l√©ment <CONTENT> */	
				this.sourceElement = args.elem;	

				if (this.content != null)
				{
					if (this.sourceElement.innerHTML.trim() != ""){
					
						this.content[0].innerHTML = this.sourceElement.innerHTML;
						if (typeof args.parent != "undefined"){
							this.parent = args.parent;
							args.parent._populateElements(this.content[0], true);
						}
					}
				}

				/* On vide l'√©l√©ment source */
				//this.sourceElement.innerHTML = "";
	
				
				var tmpClass = args.elem.getAttribute("class");
				if (tmpClass != null){
					this.container.addClass(tmpClass);
				}
			}	
		}
	
		var tmpStyle = args.inlineStyle || null;
		if (tmpStyle != null){
			
				this.sourceElementStyle =  tmpStyle;	
				this.setStyle(tmpStyle);
		}
		
		/*if (this.visible == false){
			this.hide();
		}*/
		
  	},

  	

	setStyle: function(css)
   	{
		this.container.attr("style", css);  
  	},

  	_onHashChange: function(hash, oldValue)
  	{
		var r = false;
		
  		if (this.enableHashManager) 
  		if (typeof this.onHashChange === "function"){
  			logger.debug("Telement."+this.id+"._onHashChange: "+oldValue+" --> "+hash);
  			r = this.onHashChange(hash, oldValue);
  		}
  		return r;
  	},
	
  	_onShow: function(){
  	 	//this._onHashChange( panjs.router.getHash(this));
  	},
  	_onHide: function(){

  	},

  	setHash:function(hash, silent)
  	{
  		if (this.enableHashManager){
  			if (arguments.length < 2)
  				var silent = false;
  		 	panjs.router.setHash(this, hash, silent);
  		}
  	},
	getHash:function()
  	{
  		if (this.enableHashManager) 
  		 	return panjs.router.getHash(this);
  		else
  			return null;
  	}
});






