//
// Uses CommonJS, AMD or browser globals to create a jQuery plugin.
//
// Similar to jqueryPlugin.js but also tries to
// work in a CommonJS environment.
// It is unlikely jQuery will run in a CommonJS
// environment. See jqueryPlugin.js if you do
// not want to add the extra CommonJS detection.
//
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define({{#if amdModuleId}}'{{amdModuleId}}', {{/if}}[{{{amdDependencies}}}], factory);
  } else if (typeof exports === 'object') {
    factory({{{cjsDependencies}}});
  } else {
    // Browser globals
    factory({{{globalDependencies}}});
  }
}(this, function ({{dependencies}}) {


{{{code}}}


// A really lightweight plugin wrapper around the constructor,
// preventing against multiple instantiations
var pluginName = 'formatter';

$.fn[pluginName] = function (options) {

  // Initiate plugin if options passed
  if (typeof options == 'object') {
    this.each(function () {
      if (!$.data(this, 'plugin_' + pluginName)) {
        $.data(this, 'plugin_' + pluginName,
        new formatter(this, options));
      }
    });
  }

  // Add resetPattern method to plugin
  this.resetPattern = function (str) {
    this.each(function () {
      var formatted = $.data(this, 'plugin_' + pluginName);
      // resetPattern for instance
      if (formatted) { formatted.resetPattern(str); }
    });
    // Chainable please
    return this;
  };

  // Chainable please
  return this;
};

$.fn[pluginName].addInptType = function (chr, regexp) {
  formatter.addInptType(chr, regexp);
};


}));