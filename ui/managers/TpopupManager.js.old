
defineClass("TpopupManager", "core.events.TeventDispatcher", { 

	popups: null,
	popupsCount:0,

	constructor: function(args){
		this._super.constructor.call(this,args);				
		this.bodyOverflowY = $(document.body).css("overflow-y");
		this.popups = [];
	},

	addPopup: function(instance, options)
	{
		var indx = this.popups.length;

		//pour éviter de trop agrandir le tableau
		if ((this.popups.length>0) && (this.popups[0]==null))
			indx = 0;

		if (indx == this.popups.length)
			this.popups.push(null);

		var ctn = $('<div data-backdrop="static" tabindex="-1" role="dialog" indx="'+indx+'" class="modal"></div>"');
		//var modalDialog = $('<div class="modal-dialog">');
		//ctn.append(modalDialog);
		

		instance.show();

		ctn.append(instance.container);

		ctn.css("overflow-y", "scroll"); //bug bootstap? si plusieurs modal affichées, on voit plusieurs ascenceurs
		ctn.addClass("fade");

		var keyboard = true;
		var center = true;

		if (defined(instance.closeOnESC))	
			keyboard = instance.closeOnESC;

		if (defined(options))
		{
			if (defined(options.fade))	
				if (options.fade == false)
				ctn.removeClass("fade");
		}

		var obj = {
			popupElement: ctn, 
			compo: instance, 
			onPopupShown: this._onPopupShown.bind(this),
			onPopupHidden: this._onPopupHidden.bind(this),
			onPopupShow: this._onPopupShow.bind(this),
			onPopupHide: this._onPopupHide.bind(this), 
			onCompoClose: this._onCompoClose.bind(this),
			indx: indx
		};

		this.popups[indx] = obj;
		this.popupsCount ++;

		$(document.body).append(ctn);

		/* Centrage de la popup */
		if (center)
		{
			ctn.show();
			var winH = $(window).height();
			var top = (winH - instance.container.height())/3;
			top = top - 50;

			if (top < 30)
				top = 30;

			instance.container.css("margin-top", top +"px");
			ctn.hide();
		}
		
		ctn.find('[data-toggle="popover"]').popover();
		ctn.find('[data-toggle="tooltip"]').tooltip();
		
		this._setEvents(obj, "on");

		ctn.modal({show:true, keyboard:keyboard});

		$(document.body).css("overflow-y", "hidden");
		return instance;
	},

	createPopup: function(className, args, options)
	{	
		var compo = null;

		if (defined(args))
			compo = panjs.createComponent(className,args); 
		else	
			compo = panjs.createComponent(className); 	

		this.addPopup(compo, options);
		return compo;
	},

	_setEvents: function(obj, action)
	{
		var el = obj.popupElement;
		el[action]('shown.bs.modal', obj.onPopupShown);
		el[action]('hidden.bs.modal', obj.onPopupHidden);
		el[action]('show.bs.modal', obj.onPopupShow);
		el[action]('hide.bs.modal', obj.onPopupHide);
		obj.compo[action](Tevent.CLOSE, obj.onCompoClose);
	},
	_onCompoClose: function(e)
	{
		this.removePopup(e.currentTarget);
	},
	_onPopupShow: function (e) {
		var obj = this.popups[$(e.target).attr("indx")];
	
	},
	_onPopupShown: function (e) {
		var obj = this.popups[$(e.target).attr("indx")];
		this.dispatchEvent(new Tevent(Tevent.SHOW, obj.compo));
			
	},

	_onPopupHide: function (e) {
		var obj = this.popups[$(e.target).attr("indx")];
		//obj.compo.close(e);	
		//return false;
	},

	_onPopupHidden: function (e) {
		var obj = this.popups[$(e.target).attr("indx")];
		setTimeout( this.free.bind(this, obj), 100);

		this.dispatchEvent(new Tevent(Tevent.CLOSE, obj.compo));
	},

	free:function(obj)
	{						
		this._setEvents(obj, "off");
		obj.popupElement.detach(); //remove sans enlever les evenements / data
		
		if (obj.compo._onHide)
		obj.compo._onHide();

		if (obj.compo.free)
		obj.compo.free();

		this.popups[obj.indx] = null;
		this.popupsCount --;

		if (this.popupsCount == 0){
			$(document.body).css("overflow-y", this.bodyOverflowY);
		}

	},

	removePopup: function(compo)
	{
		if (!defined(compo))
			return;
	
		//obj est le composant affiché
		for (var i=0; i< this.popups.length; i++)
		{
			if ((this.popups[i]!= null) && (this.popups[i].compo == compo))
			{
				setTimeout(function(obj){
					
					obj.popupElement.modal('hide');				

				}.bind(this, this.popups[i]), 10);
				
				break;
			}
		}

	}
});

panjs.PopupManager = new TpopupManager();
